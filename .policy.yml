policy:
  approval:
    - and:
        - "Config change"
        - "Required reviews"
approval_rules:
  - name: "Config change"
    description: "Reviews are required, there based on certain changes we ask help from code owners"
    if:
      changed_files:
        paths:
          - ".github"
    options:
      # If true, approvals by the author of a pull request are considered when
      # calculating the status. False by default.
      allow_author: false

      # If true, the approvals of someone who has committed to the pull request are
      # considered when calculating the status. The pull request author is considered
      # a contributor. If allow_author and allow_contributor would disagree, this option
      # always wins. False by default.
      allow_contributor: false

      # If true, pushing new commits to a pull request will invalidate existing
      # approvals for this rule. False by default.
      invalidate_on_push: false

      # If true, comments on PRs and review comments that have been edited in any way
      # will be ignored when evaluating approval rules. Default is false.
      ignore_edited_comments: false

      # If true, "update merges" do not invalidate approval (if invalidate_on_push
      # is enabled) and their authors/committers do not count as contributors. An
      # "update merge" is a merge commit that was created in the UI or via the API
      # and merges the target branch into the pull request branch. These are
      # commonly created by using the "Update branch" button in the UI.
      ignore_update_merges: false

      # Automatically request reviewers when a Pull Request is opened
      # if this rule is pending, there are no assigned reviewers, and if the
      # Pull Request is not in Draft.
      # Reviewers are selected based on the set of requirements for this rule
      # and reviewers can be augmented using the mode option.
      request_review:
        # False by default
        enabled: true

        # mode modifies how reviewers are selected. `all-users` will request all users
        # who are able to approve the pending rule. `random-users` selects a small
        # set of random users based on the required count of approvals. `teams` will
        # request teams to review. Teams must have explicit access defined under
        # https://github.com/<org>/<repo>/settings/access in order to be tagged,
        # at least until https://github.com/palantir/policy-bot/issues/165 is fixed.
        # Defaults to 'random-users'.
        # possible values all-users|random-users|teams
        mode: all-users

      # "methods" defines how users may express approval.
      methods:
        # If a comment matches a regular expression in this list, it counts as
        # approval. Defaults to an empty list.
        #
        # Note: Double-quote strings must escape backslashes while single/plain do not.
        # See the Notes on YAML Syntax section of this README for more information.
        comment_patterns:
          - "^Signed-off by \\s+$"
          - "^LGTM \\s+$"

        # If true, GitHub reviews can be used for approval. All GitHub review approvals
        # will be accepted as approval candidates. Default is true.
        github_review: true

      # "requires" specifies the approval requirements for the rule. If the block
      # does not exist, the rule is automatically approved.
    requires:
      # "count" is the number of required approvals. The default is 0, meaning no
      # approval is necessary.
      count: 2

      # A user must be in the list of users or belong to at least one of the given
      # organizations or teams for their approval to count for this rule.
      teams: [ "sofico-mmp-front-end/configuration" ]

      # A user must have at least the minimum permission in this list for their
      # approval to count for this rule. Valid permissions are "admin", "maintain",
      # "write", "triage", and "read".
      #
      # Specifying more than one permission is only useful to control which users
      # or teams are selected for review requests. See the documentation on review
      # requests for details.
      permissions: [ "admin" ]
  - name: "Required reviews"
    description: "Reviews are required, there based on certain changes we ask help from code owners"
    if:
      # "changed_files" is satisfied if any file in the pull request matches any
      # regular expression in the "paths" list. If the "ignore" list is present,
      # files in the pull request matching these regular expressions are ignored
      # by this rule.
      #
      # Note: Double-quote strings must escape backslashes while single/plain do not.
      # See the Notes on YAML Syntax section of this README for more information.
      changed_files:
        paths:
          - "/"

      # "options" specifies a set of restrictions on approvals. If the block does not
      # exist, the default values are used.
    options:
      # If true, approvals by the author of a pull request are considered when
      # calculating the status. False by default.
      allow_author: false

      # If true, the approvals of someone who has committed to the pull request are
      # considered when calculating the status. The pull request author is considered
      # a contributor. If allow_author and allow_contributor would disagree, this option
      # always wins. False by default.
      allow_contributor: false

      # If true, pushing new commits to a pull request will invalidate existing
      # approvals for this rule. False by default.
      invalidate_on_push: false

      # If true, comments on PRs and review comments that have been edited in any way
      # will be ignored when evaluating approval rules. Default is false.
      ignore_edited_comments: false

      # If true, "update merges" do not invalidate approval (if invalidate_on_push
      # is enabled) and their authors/committers do not count as contributors. An
      # "update merge" is a merge commit that was created in the UI or via the API
      # and merges the target branch into the pull request branch. These are
      # commonly created by using the "Update branch" button in the UI.
      ignore_update_merges: false

      # Automatically request reviewers when a Pull Request is opened
      # if this rule is pending, there are no assigned reviewers, and if the
      # Pull Request is not in Draft.
      # Reviewers are selected based on the set of requirements for this rule
      # and reviewers can be augmented using the mode option.
      request_review:
        # False by default
        enabled: true

        # mode modifies how reviewers are selected. `all-users` will request all users
        # who are able to approve the pending rule. `random-users` selects a small
        # set of random users based on the required count of approvals. `teams` will
        # request teams to review. Teams must have explicit access defined under
        # https://github.com/<org>/<repo>/settings/access in order to be tagged,
        # at least until https://github.com/palantir/policy-bot/issues/165 is fixed.
        # Defaults to 'random-users'.
        # possible values all-users|random-users|teams
        mode: all-users

      # "methods" defines how users may express approval.
      methods:
        # If a comment matches a regular expression in this list, it counts as
        # approval. Defaults to an empty list.
        #
        # Note: Double-quote strings must escape backslashes while single/plain do not.
        # See the Notes on YAML Syntax section of this README for more information.
        comment_patterns:
          - "^Signed-off by \\s+$"
          - "^LGTM \\s+$"

        # If true, GitHub reviews can be used for approval. All GitHub review approvals
        # will be accepted as approval candidates. Default is true.
        github_review: true

      # "requires" specifies the approval requirements for the rule. If the block
      # does not exist, the rule is automatically approved.
    requires:
      # "count" is the number of required approvals. The default is 0, meaning no
      # approval is necessary.
      count: 2

      # A user must be in the list of users or belong to at least one of the given
      # organizations or teams for their approval to count for this rule.
      organizations: [ "sofico-global/bothrs" ]

      # A user must have at least the minimum permission in this list for their
      # approval to count for this rule. Valid permissions are "admin", "maintain",
      # "write", "triage", and "read".
      #
      # Specifying more than one permission is only useful to control which users
      # or teams are selected for review requests. See the documentation on review
      # requests for details.
      permissions: [ "write" ]